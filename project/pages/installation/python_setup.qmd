---
title: "Using Python"
title-block-banner: false
date: last-modified
published-title: Last Updated
toc: true
---

This page explains how to set up Python in order to access and use the COMET notebooks. Credit goes to Professor Daniel Chen and the [Mac](https://ubc-dsci.github.io/dsci-310-student/install_instructions/install_stack_mac.html#python-conda-and-jupyterlab) and [Windows](https://ubc-dsci.github.io/dsci-310-student/install_instructions/install_stack_windows.html#python-conda-and-jupyterlab) installation pages. Additional credit goes to https://www.digitalocean.com/community/tutorials/install-python-windows-10. We will go over how to install Python and how to use it locally through Jupyter, on JupyterHub, and through VSCode. 

## 1. Installing Python

The first thing we'll need to do is install Python onto our computer.

::: panel-tabset

### Windows

1.  Open [the Miniforge Installation Platform](https://conda-forge.org/miniforge/) and select the appropriate link. For Windows users, this will be the Windows artifact.
2.  Once you've downloaded the artifact, you can run the installer and use all of the default options. The install location should look like `C:\Users\YOUR_USER_NAME\miniforge3`. 
3. Next, open the Start Menu and search for “Miniforge Prompt”. When this opens you will see a prompt similar to `(base) C:\Users\your_name`. We'll also check that the Python installation works by running

`python --version`. 
This should return Python 3.11.0 or greater. If it does not, confirm that you are in the (base) environment and update the base python with:

`conda install python=3.11`. 

### MacOS

1.  You'll want to first set your default Terminal shell to `Bash` as opposed to `Zsh`. Open the Terminal ([see this video for help](https://youtu.be/5AJbWEWwnbY)) and type 
`chsh -s /bin/bash`.
The close the Terminal and reopen it (this restarts the Terminal). Now, you should see `Bash` at the top of your Terminal. 
2. Next, open [the Miniforge Installation Platform](https://conda-forge.org/miniforge/) and select the appropriate link. Check your device type by clicking "About This Mac" on the top left of your screen - if your chip is M1, M2,..., download the `arm64` artifact. Otherwise, download the `x86_64` artifact. Make sure that this file is in your `Downloads` folder.
3.  Open the terminal and run the following code: 
`bash ${HOME}/Downloads/Miniforge3.sh -b -p "${HOME}/miniforge3"`. 
You may need to rename the file `Miniforge.sh`. 
4. Now you can run
`source "${HOME}/miniforge3/etc/profile.d/conda.sh"`
`conda activate`
`conda init`. 
5. You should now have access to Python! If the installation was successful, you will see `(base)` in your terminal before your device name and username. To confirm that `conda` is working, run

`conda --version`. 
You should see something like this: `conda 23.5.2`. We will also confirm that Python is working. To do so, run
`python --version`. 
It should return Python 3.11.0. 
If you do not see Python >3.11, close your terminal and open a new one. Confirm that you are in the (base) environment. Then update the base python with:

`conda install python=3.11`.

:::

## 2. Installing the Python Kernel

We'll need to install the Python kernel in order to use the Python programming language in Jupyter. To do so, in your terminal, run `python`. You should see a line with your version of Python and the date that you loaded it. 

Then, run the following lines of code in the terminal:

`conda install ipykernel`

Select `yes` if prompted. This will install the Python kernel which will allow us to run Python code! 

## 3. Using Python Locally through Jupyter

The first option for running Python is locally through Jupyter. Some students may prefer to use the local version of Jupyter that is accessible via browser, rather than through Jupyter desktop. The latter allows for more customizability at the expense of a more intuitive installation and activation process. 

### 3.1. Creating a New Environment

Here, we will create a new Python environment called "comet". An environment is an isolated space on your computer where you can work on a given project without the risk of breaking other projects. Essentially, this acts as a safety layer to protect our computer. 

To do this, in the terminal, enter the following line code:

`conda create -n python_comet_env jupyterlab`

What this is doing is creating an environment called `python_comet_env` using the `conda` package manager, and we're asking it to include Jupyter in the environment.

Then, to enable the environment, run `conda activate python_comet_env`.

::: callout-warning

Every time you want to run a COMET notebook through Jupyter, you will have to run `conda activate python_comet_env`. Otherwise, your computer will not know how to access Jupyter.

:::

## 3.2. Opening Jupyter

Finally, to open Jupyter, run the following command in your terminal: `jupyter lab`. This will open up Jupyter as a local copy on your search engine. This must be done **after** you run `conda activate [name of environment]"`, otherwise your computer will not know where to find Jupyter. 

::: callout-warning

This terminal acts as your local Jupyter server. Closing it will shut down your server!

:::

## 3.3. Opening the COMET modules Locally

Lastly, you'll want to download the COMET files. In the COMET website, press `launch COMET` from the top navigation bar, and then click on "launch locally". This will download a file (`main.zip`) to you computer. Extract the `.zip` file to a folder on your computer that you can find easily and rename it from `main` to `comet-project`. When you launch Jupyter, you will see all of the files on your computer. Locate the folder where you saved the COMET and start working from there! 

## 4. Using Python Remotely through JupyterHub

JupyterHub is a cloud-based server hosts all of the computational resources needed to run the notebooks. Since it runs in the cloud, you don’t need to install anything on your computer, and the performance is not affected by your system resources.

To launch in a cloud environment, select launch COMET from the top navigation bar, and then choose your hub. For UBC students, we recommend **JupyterOpen**, which is a UBC-supported hub which we maintain, and has all of the necessary packages pre-installed and robust space and processor support. *Note that you must have a Campus-Wide Login (CWL) in order to access these resources.*

If JupyterOpen is not working, you can also use PIMS Syzygy (Siz-za-gee). There is a UBC-specific version of this server, and several others that use a Google account or other authentication method.

Finally, if you are part of the Google ecosystem, you can launch them on Google Collab which has a slightly different appearance but it otherwise the same.

::: callout-warning
Syzygy and Google Collab are not officially supported UBC software, and may not be privacy-compliant. You should take responsibility for your own use of these resources if you choose to use them. If Google already has all your data, too bad!
:::

Once you are on the server, use the file navigation on the left to find the notebook you are interested in! 