{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: 'Notebook 2: Using Regressions to Predict Age-of-Death of Skeletal Remains'\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "In archaeology, a regression is a type predictive model in which we use **measured attributes from known examples** to predict **outcomes for new finds**. \n",
        "\n",
        "- **Dependent Variable:** The single numerical value we want our model to estimate for each new observation, also called an outcome variable. Typically denoted using $Y_i$. \n",
        "\n",
        "- **Independent Variables**: The measurements or attributes we use to explain or predict our dependent variable, usually denoted using $X_{ij}$. \n",
        "\n",
        "Our dependent variable might be something like an individual’s age at death, estimated from osteometric measurements, or the approximate date of an artifact, inferred from its dimensional and compositional features. For instance, we could use a suite of cranial measurements collected from skeletal remains to predict a individual's age, or leverage sherd thickness, fabric inclusions, and decoration motifs to estimate an artifact’s production century.\n",
        "\n",
        "![41598_2022_13983_Fig1_HTML.webp](attachment:41598_2022_13983_Fig1_HTML.webp)\n",
        "\n",
        "Much arecheological research goes into reconstructing information about skeletal remains. This often poses a significant challenge-- remains are often poorly preseved, for instane, taphonomic damage such as weathering and soil activity can erode features archeologists use for identification, and many skeletal remains are incomplete, lacking bones that exibit diagnostic traits for ancestry/sex/age/stature identification such as the pelvis and pubic symphysis. Additionally, the osteoloical standards used for grouping remains were primarily developed on 19th and 20th century European collections, making applying them to prehistroic or non-european populations innacurate. \n",
        "\n",
        "<div class=\"alert alert-block alert-warning\">\n",
        "<b>Emphasizing ancestry over race:</b> \n",
        "\n",
        "Early physical anthropologists attempted to divide humans into a few “continental races” based on cranial measurements and other morphological traits. Not only did were these typological methods arbitrary and varied wildly between scholars, but where deeply rooted in colonialism, eugenics, and scientific racism. The concept of a distinct set of races rooted in biology was widely used to justify discrimination and colonial domination: measurements of morphological traits were used to legitimize chattel slavery in the United States, and were used to justify seperate schooling and differential legal codes for Algerian rersidents well after World War II. Modern archeologists now frame bone-based classifications of skeletal remains in terms of clinical variation (gradual changes across geography) amd genomic population structure rather than discrete race boxes. The American Association of Physical Anthropologists writes: “Race does not provide an accurate representation of human biological variation. It was never accurate in the past, and it remains inaccurate when referencing contemporary human populations. Humans are not divided biologically into distinct continental types or racial genetic clusters…”. \n",
        "\n",
        "In short, archeologists must be very careful in how they frame their analyses of skeletal morphology, and not use race as a biological descriptor, rather framing analyses in terms of ancestry, population affinity, and clinical variation. \n",
        "</div>\n",
        "\n",
        "Here is where predictive models step in: by \n",
        "\n",
        "Among the many regression techniques available, the K-nearest neighbors (KNN) algorithm is particularly intuitive and flexible. In short, to apply KNN, we first assemble a reference dataset of specimens whose ages or dates are reliably known—perhaps through radiocarbon dating or historical documentation. Each new specimen is then compared to its K most similar neighbors (e.g., measurements of bone lengths, cortical thickness, strontium ratios, decoration counts), and its predicted age or date is calculated to be the average value of those neighbors.\n",
        "\n",
        "## 1.2 Exploring the dataset\n",
        "\n",
        "The **Goldman Osteometric Dataset** is a collection of 1538 osteometric measurements taken from a sample of human skeletons belonging to various periods of the Holocene. The dataset contains measurements for the femur, tibia, radius, pelvis, and humerus. \n"
      ],
      "id": "e859ef20"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import altair as alt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import GridSearchCV, train_test_split\n",
        "from sklearn.compose import make_column_transformer\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn import set_config\n",
        "from pytimetk import glimpse\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "    \n",
        "# Output dataframes instead of arrays\n",
        "set_config(transform_output=\"pandas\")\n",
        "\n",
        "np.random.seed(10)\n",
        "\n",
        "goldman_skeletons = pd.read_csv('Goldman.csv', encoding=\"utf-8\")"
      ],
      "id": "d09d984f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "goldman_skeletons"
      ],
      "id": "cee5a54b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(goldman_skeletons.columns.values)"
      ],
      "id": "199899e6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "glimpse(goldman_skeletons)"
      ],
      "id": "d3257814",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.figure()\n",
        "goldman_skeletons['Age'].value_counts().sort_index().plot.bar()\n",
        "plt.title('Count by Age Category')\n",
        "plt.xlabel('Age Category')\n",
        "plt.ylabel('Count')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "c983166c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.figure()\n",
        "goldman_skeletons.boxplot(column='AVG FHD', by='Sex')\n",
        "plt.title('Average FHD by Sex')\n",
        "plt.suptitle('')\n",
        "plt.xlabel('Sex')\n",
        "plt.ylabel('AVG FHD')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "35e7f2b1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plt.figure()\n",
        "plt.scatter(\n",
        "    goldman_skeletons['Brachial'],\n",
        "    goldman_skeletons['Crural'],\n",
        "    alpha=0.5\n",
        ")\n",
        "plt.title('Crural vs Brachial')\n",
        "plt.xlabel('Brachial')\n",
        "plt.ylabel('Crural')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "50f72521",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "from shapely.geometry import Point\n",
        "from shapely.ops import unary_union\n",
        "import geoplot as gplt\n",
        "import matplotlib.pyplot as plt\n",
        "import contextily as ctx\n",
        "from geopy.geocoders import Nominatim\n",
        "\n",
        "sites = goldman_skeletons['NOTE'].unique()\n",
        "print(f\"Total unique sites to geocode: {len(sites)}\")\n",
        "\n",
        "geolocator = Nominatim(user_agent=\"archaeo_mapper\")\n",
        "coords = {}\n",
        "for site in sites:\n",
        "    try:\n",
        "        loc = geolocator.geocode(f\"{site}, USA\")\n",
        "        if loc:\n",
        "            coords[site] = (loc.longitude, loc.latitude)\n",
        "    except Exception:\n",
        "        pass\n",
        "\n",
        "print(f\"Number of sites successfully geocoded: {len(coords)}\")\n",
        "\n",
        "# 2) Map coords back and drop any misses"
      ],
      "id": "f994c30a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import geopandas as gpd\n",
        "from folium import Map, CircleMarker\n",
        "from folium.plugins import HeatMap\n",
        "import branca.colormap as cm\n",
        "\n",
        "df = goldman_skeletons.dropna(subset=['lon','lat']).copy()\n",
        "\n",
        "\n",
        "center = [df['lat'].mean(), df['lon'].mean()]\n",
        "m = Map(location=center, zoom_start=4, tiles='CartoDB positron')\n",
        "\n",
        "\n",
        "heat_data = [\n",
        "    [row['lat'], row['lon'], 1.0]\n",
        "    for idx, row in df.iterrows()\n",
        "]\n",
        "\n",
        "m.add_child(HeatMap(\n",
        "    heat_data,\n",
        "    min_opacity=0.3,\n",
        "    max_zoom=10,\n",
        "    radius=50,\n",
        "    blur=30,\n",
        "    gradient={0.0: 'navy', 0.2: 'blue', 0.4: 'lime', 0.6: 'yellow', 0.8: 'orange', 1.0: 'red'},\n",
        "    name='Site Density'\n",
        "))\n",
        "\n",
        "for idx, row in df.iterrows():\n",
        "    CircleMarker(\n",
        "        location=(row['lat'], row['lon']),\n",
        "        radius=3,\n",
        "        color='black',\n",
        "        fill=True,\n",
        "        fill_opacity=0.6\n",
        "    ).add_to(m)\n",
        "\n",
        "\n",
        "colormap = cm.LinearColormap(\n",
        "    ['navy','blue','lime','yellow','orange','red'],\n",
        "    vmin=0, vmax=1\n",
        ")\n",
        "colormap.caption = 'Relative Site Density' \n",
        "colormap.add_to(m)\n",
        "\n",
        "m.save('archaeo_heatmap.html')"
      ],
      "id": "b116e3c3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df.drop(columns=['Brachial', 'Crural', 'IL.UL.LL', 'IL.LL.UL', 'CBR.FHD', 'McH.FHD', 'GRINE.FHD', 'AVG.FHD'], \n",
        "        inplace=True, errors='ignore')\n",
        "\n",
        "# Drop right-side measurement columns to avoid duplication (use left-side measurements by convention:contentReference[oaicite:8]{index=8})\n",
        "right_side_cols = ['RHUM','RRAD','RFEM','RTIB','RIBL','RAcH']  # presence of right bones & right pelvic measures\n",
        "right_side_cols += [col for col in df.columns if col.startswith('R') and col not in ['Sex','Age']] \n",
        "df.drop(columns=right_side_cols, inplace=True, errors='ignore')\n",
        "\n",
        "# At this point, df contains sex, age, left-side bone presence, and left-side measurements.\n",
        "# (Presence columns like LHUM, LRAD, etc., indicate if a bone was present; measurements have NaN if absent.)\n",
        "# Drop the presence indicator columns as we will directly handle missing measurements by dropping rows\n",
        "df.drop(columns=['LHUM','LRAD','LFEM','LTIB','OSCX'], inplace=True, errors='ignore')\n",
        "\n",
        "# Display the remaining columns for verification (optional)\n",
        "print(\"Remaining columns:\", df.columns.tolist())\n",
        "print(\"Remaining rows:\", len(df))"
      ],
      "id": "c2f4b150",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "features = ['LHML', 'LHHD', 'LFML', 'LFHD', 'LFMLD', 'LTML']\n",
        "\n",
        "# Drop any rows that have NaN in any of these feature columns (complete-case analysis)\n",
        "df_final = df.dropna(subset=features).copy()\n",
        "\n",
        "# For modeling, separate the target and features; also drop Sex (we focus on osteometric features only)\n",
        "X = df_final[features]\n",
        "y = df_final['Age']\n",
        "df_final.drop(columns=['Sex'], inplace=True, errors='ignore')  # (Sex could be included as a feature, but we exclude it to let bone metrics drive the model)\n",
        "\n",
        "print(f\"Selected features: {features}\")\n",
        "print(f\"Remaining samples after dropping missing data: {df_final.shape[0]} (out of 1538 original)\")"
      ],
      "id": "e89e81ed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Split the data into train and test sets (stratify by age class to maintain class proportions)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "print(\"Train size:\", X_train.shape[0], \"Test size:\", X_test.shape[0])\n",
        "\n",
        "# Feature scaling: fit on train set and transform both train and test\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "id": "8f954eb7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "# Initialize the models\n",
        "log_clf = LogisticRegression(multi_class='multinomial', solver='lbfgs', max_iter=500, random_state=42)\n",
        "knn_clf = KNeighborsClassifier(n_neighbors=5)\n",
        "\n",
        "# Train (fit) the models on the training set\n",
        "log_clf.fit(X_train_scaled, y_train)\n",
        "knn_clf.fit(X_train_scaled, y_train)"
      ],
      "id": "62f8a037",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "from ipywidgets import interact, IntSlider"
      ],
      "id": "0dc59ad6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "@interact(feature=features)\n",
        "def plot_feature_distribution(feature):\n",
        "    fig = px.box(df_final, x='Age', y=feature, color='Age', \n",
        "                 title=f\"Distribution of {feature} by Age-at-Death Category\",\n",
        "                 labels={feature: f\"{feature} (mm)\"})\n",
        "    fig.update_layout(xaxis_title=\"Age-at-Death Category\", yaxis_title=f\"{feature} (mm)\", showlegend=False)\n",
        "    fig.show()"
      ],
      "id": "b0605308",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "y_pred_log = log_clf.predict(X_test_scaled)\n",
        "y_pred_knn = knn_clf.predict(X_test_scaled)\n",
        "\n",
        "classes = sorted(y_test.unique())"
      ],
      "id": "5f879c80",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "report_log = classification_report(y_test, y_pred_log, output_dict=True)\n",
        "report_knn = classification_report(y_test, y_pred_knn, output_dict=True)\n",
        "metrics = ['precision', 'recall', 'f1-score']\n",
        "\n",
        "@interact(metric=metrics)\n",
        "def plot_model_metrics(metric):\n",
        "    # Build a dataframe of metric values for each class and model\n",
        "    data = []\n",
        "    for cls in classes:\n",
        "        data.append({\n",
        "            'Age': cls,\n",
        "            'Model': 'Logistic',\n",
        "            'Score': report_log[cls][metric]\n",
        "        })\n",
        "        data.append({\n",
        "            'Age': cls,\n",
        "            'Model': 'KNN',\n",
        "            'Score': report_knn[cls][metric]\n",
        "        })\n",
        "    df_metrics = pd.DataFrame(data)\n",
        "    # Create grouped bar chart\n",
        "    fig = px.bar(df_metrics, x='Age', y='Score', color='Model', barmode='group',\n",
        "                 title=f\"{metric.capitalize()} by Age-at-Death Class: Logistic vs KNN\",\n",
        "                 labels={'Score': metric.capitalize(), 'Age': 'Age-at-Death Category'})\n",
        "    fig.update_layout(xaxis_title=\"Age-at-Death Category\", yaxis_title=metric.capitalize())\n",
        "    fig.show()"
      ],
      "id": "7554453c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "@interact(k=IntSlider(min=1, max=15, step=1, value=5))\n",
        "def plot_knn_confusion(k):\n",
        "    # Train a new KNN with the given k\n",
        "    knn = KNeighborsClassifier(n_neighbors=k)\n",
        "    knn.fit(X_train_scaled, y_train)\n",
        "    y_pred_k = knn.predict(X_test_scaled)\n",
        "    # Compute confusion matrix\n",
        "    cm = confusion_matrix(y_test, y_pred_k, labels=classes)\n",
        "    acc = accuracy_score(y_test, y_pred_k)\n",
        "    # Plot confusion matrix heatmap\n",
        "    fig = px.imshow(cm, text_auto=True, color_continuous_scale=\"Blues\",\n",
        "                    x=classes, y=classes,\n",
        "                    title=f\"KNN Confusion Matrix (k={k}) – Accuracy: {acc:.2%}\")\n",
        "    fig.update_layout(xaxis_title=\"Predicted Age-at-Death\", yaxis_title=\"Actual Age-at-Death\")\n",
        "    fig.show()"
      ],
      "id": "ead992e8",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Irene\\miniconda3\\envs\\tlef-ai-312\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}