---
title: "Stock Predictor"
format: html
jupyter: python3
---

# Predicting Stock Prices from News Headlines with AI



This notebook helps you explore how **language models** can analyze real-world news headlines to predict changes in stock prices.

You’ll:
- Collect news headlines about real companies (like Starbucks or Apple)
- Use a pre-trained AI model to classify the **sentiment** (positive or negative) of these news headlines
- Combine that with stock prices
- Use a forecasting model to predict future price changes
- Visualize your results interactively




```python
pip install yfinance finvizfinance transformers pandas numpy statsmodels holidays plotly ipywidgets

```

    Requirement already satisfied: yfinance in /opt/anaconda3/envs/new/lib/python3.12/site-packages (0.2.65)
    Requirement already satisfied: finvizfinance in /opt/anaconda3/envs/new/lib/python3.12/site-packages (1.1.1)
    Requirement already satisfied: transformers in /opt/anaconda3/envs/new/lib/python3.12/site-packages (4.49.0)
    Requirement already satisfied: pandas in /opt/anaconda3/envs/new/lib/python3.12/site-packages (2.2.3)
    Requirement already satisfied: numpy in /opt/anaconda3/envs/new/lib/python3.12/site-packages (2.1.3)
    Requirement already satisfied: statsmodels in /opt/anaconda3/envs/new/lib/python3.12/site-packages (0.14.5)
    Requirement already satisfied: holidays in /opt/anaconda3/envs/new/lib/python3.12/site-packages (0.76)
    Requirement already satisfied: plotly in /opt/anaconda3/envs/new/lib/python3.12/site-packages (6.2.0)
    Requirement already satisfied: ipywidgets in /opt/anaconda3/envs/new/lib/python3.12/site-packages (8.1.5)
    Requirement already satisfied: requests>=2.31 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (2.32.3)
    Requirement already satisfied: multitasking>=0.0.7 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (0.0.11)
    Requirement already satisfied: platformdirs>=2.0.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (3.10.0)
    Requirement already satisfied: pytz>=2022.5 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (2024.1)
    Requirement already satisfied: frozendict>=2.3.4 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (2.4.6)
    Requirement already satisfied: peewee>=3.16.2 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (3.18.2)
    Requirement already satisfied: beautifulsoup4>=4.11.1 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (4.12.3)
    Requirement already satisfied: curl_cffi>=0.7 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (0.12.0)
    Requirement already satisfied: protobuf>=3.19.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (4.25.3)
    Requirement already satisfied: websockets>=13.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from yfinance) (15.0.1)
    Requirement already satisfied: lxml in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from finvizfinance) (6.0.0)
    Requirement already satisfied: filelock in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from transformers) (3.13.1)
    Requirement already satisfied: huggingface-hub<1.0,>=0.26.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from transformers) (0.29.2)
    Requirement already satisfied: packaging>=20.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from transformers) (24.2)
    Requirement already satisfied: pyyaml>=5.1 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from transformers) (6.0.2)
    Requirement already satisfied: regex!=2019.12.17 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from transformers) (2024.11.6)
    Requirement already satisfied: tokenizers<0.22,>=0.21 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from transformers) (0.21.0)
    Requirement already satisfied: safetensors>=0.4.1 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from transformers) (0.5.3)
    Requirement already satisfied: tqdm>=4.27 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from transformers) (4.67.1)
    Requirement already satisfied: python-dateutil>=2.8.2 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from pandas) (2.9.0.post0)
    Requirement already satisfied: tzdata>=2022.7 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from pandas) (2023.3)
    Requirement already satisfied: scipy!=1.9.2,>=1.8 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from statsmodels) (1.15.2)
    Requirement already satisfied: patsy>=0.5.6 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from statsmodels) (1.0.1)
    Requirement already satisfied: narwhals>=1.15.1 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from plotly) (1.47.0)
    Requirement already satisfied: comm>=0.1.3 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipywidgets) (0.2.1)
    Requirement already satisfied: ipython>=6.1.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipywidgets) (8.30.0)
    Requirement already satisfied: traitlets>=4.3.1 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipywidgets) (5.14.3)
    Requirement already satisfied: widgetsnbextension~=4.0.12 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipywidgets) (4.0.13)
    Requirement already satisfied: jupyterlab-widgets~=3.0.12 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipywidgets) (3.0.13)
    Requirement already satisfied: soupsieve>1.2 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)
    Requirement already satisfied: cffi>=1.12.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from curl_cffi>=0.7->yfinance) (1.17.1)
    Requirement already satisfied: certifi>=2024.2.2 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from curl_cffi>=0.7->yfinance) (2025.1.31)
    Requirement already satisfied: fsspec>=2023.5.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from huggingface-hub<1.0,>=0.26.0->transformers) (2024.12.0)
    Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from huggingface-hub<1.0,>=0.26.0->transformers) (4.12.2)
    Requirement already satisfied: decorator in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipython>=6.1.0->ipywidgets) (5.1.1)
    Requirement already satisfied: jedi>=0.16 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipython>=6.1.0->ipywidgets) (0.19.2)
    Requirement already satisfied: matplotlib-inline in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipython>=6.1.0->ipywidgets) (0.1.6)
    Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipython>=6.1.0->ipywidgets) (3.0.43)
    Requirement already satisfied: pygments>=2.4.0 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipython>=6.1.0->ipywidgets) (2.15.1)
    Requirement already satisfied: stack-data in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipython>=6.1.0->ipywidgets) (0.2.0)
    Requirement already satisfied: pexpect>4.3 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from ipython>=6.1.0->ipywidgets) (4.8.0)
    Requirement already satisfied: six>=1.5 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)
    Requirement already satisfied: charset-normalizer<4,>=2 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from requests>=2.31->yfinance) (3.3.2)
    Requirement already satisfied: idna<4,>=2.5 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from requests>=2.31->yfinance) (3.7)
    Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from requests>=2.31->yfinance) (2.3.0)
    Requirement already satisfied: pycparser in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from cffi>=1.12.0->curl_cffi>=0.7->yfinance) (2.21)
    Requirement already satisfied: parso<0.9.0,>=0.8.4 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets) (0.8.4)
    Requirement already satisfied: ptyprocess>=0.5 in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets) (0.7.0)
    Requirement already satisfied: wcwidth in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=6.1.0->ipywidgets) (0.2.5)
    Requirement already satisfied: executing in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (0.8.3)
    Requirement already satisfied: asttokens in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (2.0.5)
    Requirement already satisfied: pure-eval in /opt/anaconda3/envs/new/lib/python3.12/site-packages (from stack-data->ipython>=6.1.0->ipywidgets) (0.2.2)
    Note: you may need to restart the kernel to use updated packages.



```python
import yfinance as yf
from finvizfinance.quote import finvizfinance
from transformers import pipeline
import pandas as pd
import numpy as np
from statsmodels.tsa.statespace.sarimax import SARIMAX
import pandas as pd
import holidays
import plotly.graph_objects as go
import numpy as np
import ipywidgets as widgets
from IPython.display import display, clear_output


```


```python
classifier = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment-latest", device=-1)
```

    Some weights of the model checkpoint at cardiffnlp/twitter-roberta-base-sentiment-latest were not used when initializing RobertaForSequenceClassification: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
    - This IS expected if you are initializing RobertaForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
    - This IS NOT expected if you are initializing RobertaForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
    Device set to use cpu


This uses the yfinance and finvizfinance packages to retrive real-time news data !


```python

def get_news_data(ticker):
    stock = finvizfinance(ticker)
    news_df = stock.ticker_news()
    news_df = pd.DataFrame(news_df)

    # Drop NaN and clean whitespace
    news_df = news_df.dropna(subset=["Title"])
    news_df = news_df[news_df["Title"].str.strip() != ""]
    news_df['Title'] = news_df['Title'].str.lower()
    news_df['Date'] = pd.to_datetime(news_df['Date'])
    news_df['DateOnly'] = news_df['Date'].dt.date

    return news_df.reset_index(drop=True)



```

## Preview the News Data

Let’s look at what the cleaned news data looks like. We’ll start with a company like Starbucks (`SBUX`).

Each row is a headline, and we’ve cleaned it to keep only useful info like the title and date.



```python
# Example: Preview the news data for a specific company (e.g., Starbucks)
ticker = "SBUX"
news_df = get_news_data(ticker)

# Show the first 5 rows
news_df.head()

```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Date</th>
      <th>Title</th>
      <th>Link</th>
      <th>Source</th>
      <th>DateOnly</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2025-07-14 16:46:00</td>
      <td>procter &amp; rivian downgraded, starbucks gets a ...</td>
      <td>https://finance.yahoo.com/video/procter-rivian...</td>
      <td>Yahoo Finance Video</td>
      <td>2025-07-14</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2025-07-14 15:57:00</td>
      <td>starbucks calls corporate employees back to th...</td>
      <td>https://chainstoreage.com/starbucks-calls-corp...</td>
      <td>Chain Store Age</td>
      <td>2025-07-14</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2025-07-14 15:50:00</td>
      <td>starbucks ceo brian niccol increases in-office...</td>
      <td>https://finance.yahoo.com/m/b3d8b572-4df2-392c...</td>
      <td>Nation's Restaurant News</td>
      <td>2025-07-14</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2025-07-14 15:10:00</td>
      <td>starbucks to shift to four-day work from offic...</td>
      <td>https://finance.yahoo.com/news/starbucks-shift...</td>
      <td>Reuters</td>
      <td>2025-07-14</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2025-07-14 15:08:00</td>
      <td>restaurant stocks are in trouble. how they're ...</td>
      <td>https://www.barrons.com/articles/restaurant-st...</td>
      <td>Barrons.com</td>
      <td>2025-07-14</td>
    </tr>
  </tbody>
</table>
</div>



## Classifying Headline Sentiment with LLM

We now apply a pre-trained **large language model** to each headline.

It returns:
- `POSITIVE` — news that sounds good (e.g., “profits surge”)
- `NEGATIVE` — news that sounds bad (e.g., “lawsuit filed”)

We skip `NEUTRAL` news to focus on strong market signals.

This uses Hugging Face’s `pipeline()` to load a model called **DistilBERT** that’s been trained on movie reviews, but works surprisingly well on financial headlines too!



```python
# classifier = pipeline("sentiment-analysis")

def classify_sentiment(text):
    return classifier(text)[0]["label"].upper()

def apply_sentiment(news_df):
    news_df["Sentiment"] = news_df["Title"].apply(classify_sentiment)
    return news_df[news_df["Sentiment"] != "NEUTRAL"]

```


```python
def process_sentiment(news_df):
    grouped = news_df.groupby(["DateOnly", "Sentiment"]).size().unstack(fill_value=0)
    grouped = grouped.reindex(columns=["POSITIVE", "NEGATIVE"], fill_value=0)

    grouped["7day_avg_positive"] = grouped["POSITIVE"].rolling(window=7, min_periods=1).sum()
    grouped["7day_avg_negative"] = grouped["NEGATIVE"].rolling(window=7, min_periods=1).sum()
    grouped["7day_pct_positive"] = grouped["POSITIVE"] / (grouped["POSITIVE"] + grouped["NEGATIVE"])

    return grouped.reset_index()

```


```python
news_df = get_news_data("AAPL")            # Step 1: Get news data
news_df = apply_sentiment(news_df)         # Step 2: Classify sentiment
sentiment_df = process_sentiment(news_df)  # Step 3: Process sentiment stats
sentiment_df.head(5)

```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Sentiment</th>
      <th>DateOnly</th>
      <th>POSITIVE</th>
      <th>NEGATIVE</th>
      <th>7day_avg_positive</th>
      <th>7day_avg_negative</th>
      <th>7day_pct_positive</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2025-07-10</td>
      <td>5</td>
      <td>3</td>
      <td>5.0</td>
      <td>3.0</td>
      <td>0.625000</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2025-07-11</td>
      <td>10</td>
      <td>6</td>
      <td>15.0</td>
      <td>9.0</td>
      <td>0.625000</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2025-07-12</td>
      <td>2</td>
      <td>4</td>
      <td>17.0</td>
      <td>13.0</td>
      <td>0.333333</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2025-07-13</td>
      <td>2</td>
      <td>0</td>
      <td>19.0</td>
      <td>13.0</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2025-07-14</td>
      <td>3</td>
      <td>3</td>
      <td>22.0</td>
      <td>16.0</td>
      <td>0.500000</td>
    </tr>
  </tbody>
</table>
</div>



## Understanding the Sentiment Data Table

This table summarizes how **news sentiment** changes over time for a particular stock (e.g., AAPL), using headlines pulled from financial news.

| Column                | What it means                                                                 |
|-----------------------|------------------------------------------------------------------------------|
| `DateOnly`            | The specific date of the news                                                |
| `POSITIVE`            | Number of news headlines that had **positive** sentiment on that day        |
| `NEGATIVE`            | Number of headlines that had **negative** sentiment that day                |
| `7day_avg_positive`   | Rolling 7-day **sum** of positive headlines (used to smooth out day-to-day spikes) |
| `7day_avg_negative`   | Rolling 7-day **sum** of negative headlines                                  |
| `7day_pct_positive`   | Percentage of headlines that were positive in the last 7 days:<br>  
\[
\frac{\text{Positive}}{\text{Positive} + \text{Negative}}
\]

---

###  Why is this useful?

- If the `7day_pct_positive` is rising, the **overall tone of news** is getting more optimistic.
- If it's dropping, it could mean **public or investor concern** is growing.
- We can later **plot this** and compare it against stock price to see if sentiment influences market behavior.



```python
# downloads historical stock prices and calculates daily percentage change in closing price

def get_stock_data(ticker, start, end):
    stock = yf.download(ticker, start=start, end=end)

    # Check if columns are MultiIndex (only happens with multiple tickers)
    if isinstance(stock.columns, pd.MultiIndex):
        stock.columns = ['_'.join(col).strip() for col in stock.columns]

        # Adjust close column name accordingly
        close_col = f"Close_{ticker}"
    else:
        close_col = "Close"

    stock["Pct_Change"] = stock[close_col].pct_change() * 100
    stock.reset_index(inplace=True)
    stock["DateOnly"] = stock["Date"].dt.date
    return stock[["DateOnly", "Pct_Change"]]


```


```python
# print("sent_df index:", sent_df.index)
# print("stock_df index:", stock_df.index)

# print("\nSENT_DF COLUMNS:")
# print(sent_df.columns)

# print("\nSTOCK_DF COLUMNS:")
# print(stock_df.columns)

# print("\nSENT_DF HEAD:")
# print(sent_df.head())

# print("\nSTOCK_DF HEAD:")
# print(stock_df.head())

```


```python
# merges sentiment and stock data by date, and lags sentiment by one day to align with price changes.
def combine_data(sent_df, stock_df):
    sent_df = sent_df.reset_index(drop=True)
    stock_df = stock_df.reset_index(drop=True)
    return (
        pd.merge(sent_df, stock_df, on="DateOnly", how="inner")
          .assign(lagged_sentiment=lambda df: df["7day_pct_positive"].shift(1))
    )


```


```python
def compute_corr(df):
    """
    Computes correlation between lagged sentiment and stock % change.
    """
    return df[["lagged_sentiment", "Pct_Change"]].corr().iloc[0, 1]

```


```python
ticker = "SBUX"

news = get_news_data(ticker)
news = apply_sentiment(news)
sent_df = process_sentiment(news)

start_date = sent_df["DateOnly"].min()
end_date = sent_df["DateOnly"].max()

stock_df = get_stock_data(ticker, start_date, end_date)

combined_df = combine_data(sent_df, stock_df)

corr = compute_corr(combined_df)
print("Correlation between lagged sentiment and % stock change:", corr)

```

    /var/folders/pk/gm23sx4x0k33f49dv5hh292m0000gn/T/ipykernel_11848/698940683.py:4: FutureWarning:
    
    YF.download() has changed argument auto_adjust default to True
    
    [*********************100%***********************]  1 of 1 completed

    Correlation between lagged sentiment and % stock change: 0.41982100189478405


    



```python
def get_future_dates(start_date, num_days):
    if not isinstance(start_date, pd.Timestamp):
        start_date = pd.to_datetime(start_date)

    us_holidays = holidays.US()
    future_dates = []
    current_date = start_date + pd.Timedelta(days=1)

    while len(future_dates) < num_days:
        if current_date.weekday() < 5 and current_date.date() not in us_holidays:
            future_dates.append(current_date)
        current_date += pd.Timedelta(days=1)

    return future_dates


def fit_and_forecast(combined_df, forecast_steps=3):
    combined_df = combined_df.dropna(subset=['Pct_Change', 'lagged_sentiment'])

    endog = combined_df['Pct_Change']
    exog = combined_df['lagged_sentiment']

    model = SARIMAX(endog, exog=exog, order=(1, 1, 1))
    fit = model.fit(disp=False)

    future_dates = get_future_dates(combined_df.index[-1], forecast_steps)
    future_exog = np.tile(combined_df['lagged_sentiment'].iloc[-1], forecast_steps).reshape(-1, 1)

    forecast = fit.get_forecast(steps=forecast_steps, exog=future_exog)
    return forecast.predicted_mean, forecast.conf_int(), future_dates


```


```python
def create_plot(combined_df, forecast_mean, forecast_ci, forecast_index):
    combined_df = combined_df.copy()
    sentiment_std = (combined_df['lagged_sentiment'] - combined_df['lagged_sentiment'].mean()) / combined_df['lagged_sentiment'].std()

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=combined_df.index,
        y=sentiment_std,
        name='Standardized Sentiment',
        line=dict(color='blue')
    ))

    fig.add_trace(go.Scatter(
        x=combined_df.index,
        y=combined_df['Pct_Change'],
        name='Stock % Change',
        yaxis='y2',
        line=dict(color='green')
    ))

    fig.add_trace(go.Scatter(
        x=forecast_index,
        y=forecast_mean,
        name='Forecasted % Change',
        line=dict(color='red')
    ))

    fig.add_trace(go.Scatter(
        x=np.concatenate([forecast_index, forecast_index[::-1]]),
        y=np.concatenate([forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1][::-1]]),
        fill='toself',
        fillcolor='rgba(255,0,0,0.2)',
        line=dict(color='rgba(255,255,255,0)'),
        hoverinfo="skip",
        showlegend=False
    ))

    # ✅ FIXED titlefont (use inside `title` object)
    fig.update_layout(
        title='Sentiment vs Stock Change Forecast',
        xaxis_title='Date',
        yaxis=dict(
            title=dict(text='Standardized Sentiment', font=dict(color='blue'))
        ),
        yaxis2=dict(
            title=dict(text='Stock % Change', font=dict(color='green')),
            overlaying='y',
            side='right'
        ),
        template='plotly_dark'
    )

    fig.show()

```


```python
combined_df['DateOnly'] = pd.to_datetime(combined_df['DateOnly'])  # convert to datetime
combined_df.set_index('DateOnly', inplace=True)  # use as index
combined_df.sort_index(inplace=True)  # ensure time order



```

### Plot: Sentiment vs Stock % Change Forecast

This chart shows how **news sentiment** about a company relates to its **stock price changes** over time, and how we can use this relationship to make simple predictions.

- The **blue line** shows the standardized 7-day average of positive sentiment extracted from financial news headlines. A higher value means news sentiment was more positive.
- The **green line** shows the actual daily percentage change in the company’s stock price.
- The **red line** shows our simple **forecast** of future stock movement based on past sentiment trends. The shaded red area represents uncertainty around the forecast (a 95% confidence interval).

We want to see whether the **emotions in the news** (blue) can help us **predict price changes** (green and red). If they move together, it suggests that public mood might influence investor behavior.

> This kind of plot helps us visualize correlations and test basic forecasting using real-world data like stock prices and media sentiment.



```python
forecast_mean, forecast_ci, forecast_index = fit_and_forecast(combined_df)
create_plot(combined_df, forecast_mean, forecast_ci, forecast_index)

```

    /opt/anaconda3/envs/new/lib/python3.12/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning:
    
    A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.
    
    /opt/anaconda3/envs/new/lib/python3.12/site-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning:
    
    A date index has been provided, but it has no associated frequency information and so will be ignored when e.g. forecasting.
    
    /opt/anaconda3/envs/new/lib/python3.12/site-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning:
    
    Non-invertible starting MA parameters found. Using zeros as starting parameters.
    
    /opt/anaconda3/envs/new/lib/python3.12/site-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning:
    
    No supported index is available. Prediction results will be given with an integer index beginning at `start`.
    
    /opt/anaconda3/envs/new/lib/python3.12/site-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning:
    
    No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.
    




>  **Disclaimer**: This is a simplified model. In reality, stock prices are influenced by many factors, such as interest rates, earnings reports, geopolitical events, and investor speculation. This chart only considers **one variable**: news sentiment. It should not be used for actual trading decisions.


